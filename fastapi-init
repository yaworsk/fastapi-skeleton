#!/bin/bash
set -e

# FastAPI Project Generator
# Usage: ./fastapi-init <project_name> [options]

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SKELETON_DIR="$SCRIPT_DIR/skeleton"
SCRIPTS_DIR="$SCRIPT_DIR/scripts"

# Source validation functions
source "$SCRIPTS_DIR/validate.sh"

# Default configuration
DEFAULT_BACKEND_PORT=8000
DEFAULT_FRONTEND_PORT=3000
DEFAULT_DB_PORT=5432

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

show_usage() {
    cat << EOF
üöÄ FastAPI Project Generator

Usage: $0 <project_name> [options]

Arguments:
  project_name         Name of the new project (required)

Options:
  -p, --port PORT      Backend port (default: $DEFAULT_BACKEND_PORT)
  -f, --frontend PORT  Frontend port (default: $DEFAULT_FRONTEND_PORT)
  -d, --db PORT        Database port (default: $DEFAULT_DB_PORT)
  --no-git            Skip git repository initialization
  --no-start          Skip automatic 'make dev' after creation
  -h, --help          Show this help message

Examples:
  $0 my-blog-api                           # Create with default ports
  $0 user-service --port 8001              # Custom backend port
  $0 ../my-company/api --port 8002 --frontend 3001  # Custom ports and path
  $0 inventory-api --no-git --no-start     # Skip git and auto-start

The generator will:
  ‚úÖ Create a new FastAPI project with clean MVC architecture
  ‚úÖ Set up Docker containers with unique names and ports
  ‚úÖ Configure database with project-specific names
  ‚úÖ Generate secure secret keys
  ‚úÖ Initialize git repository (unless --no-git)
  ‚úÖ Optionally start development environment
EOF
}

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Parse command line arguments
parse_args() {
    PROJECT_NAME=""
    BACKEND_PORT=$DEFAULT_BACKEND_PORT
    FRONTEND_PORT=$DEFAULT_FRONTEND_PORT
    DB_PORT=$DEFAULT_DB_PORT
    SKIP_GIT=false
    SKIP_START=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                exit 0
                ;;
            -p|--port)
                BACKEND_PORT="$2"
                shift 2
                ;;
            -f|--frontend)
                FRONTEND_PORT="$2"
                shift 2
                ;;
            -d|--db)
                DB_PORT="$2"
                shift 2
                ;;
            --no-git)
                SKIP_GIT=true
                shift
                ;;
            --no-start)
                SKIP_START=true
                shift
                ;;
            -*)
                log_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
            *)
                if [[ -z "$PROJECT_NAME" ]]; then
                    PROJECT_NAME="$1"
                else
                    log_error "Multiple project names specified: '$PROJECT_NAME' and '$1'"
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    if [[ -z "$PROJECT_NAME" ]]; then
        log_error "Project name is required"
        show_usage
        exit 1
    fi
}

create_project() {
    local project_name="$1"
    local backend_port="$2"
    local frontend_port="$3"
    local db_port="$4"
    local skip_git="$5"
    local skip_start="$6"
    
    # Determine project directory
    if [[ "$project_name" == "." ]]; then
        PROJECT_DIR="$(pwd)"
        project_name=$(basename "$PROJECT_DIR")
        log_info "Initializing current directory as '$project_name'"
    else
        PROJECT_DIR="$(pwd)/$project_name"
        log_info "Creating project in '$PROJECT_DIR'"
    fi
    
    # Validate project name
    if ! validate_project_name "$project_name"; then
        exit 1
    fi
    
    # Validate directory
    if ! validate_directory "$PROJECT_DIR"; then
        exit 1
    fi
    
    # Check for existing project
    if ! check_existing_project "$PROJECT_DIR"; then
        exit 1
    fi
    
    # Check dependencies
    if ! check_dependencies; then
        exit 1
    fi
    
    # Find available ports
    log_info "Finding available ports..."
    local ports_result
    ports_result=$(find_available_ports "$backend_port" "$frontend_port" "$db_port")
    if [[ $? -ne 0 ]]; then
        log_error "$ports_result"
        exit 1
    fi
    
    read -r backend_port frontend_port db_port test_db_port <<< "$ports_result"
    
    if [[ "$backend_port" != "$BACKEND_PORT" || "$frontend_port" != "$FRONTEND_PORT" || "$db_port" != "$DB_PORT" ]]; then
        log_warning "Adjusted ports to avoid conflicts:"
        log_warning "  Backend: $backend_port, Frontend: $frontend_port, Database: $db_port"
    fi
    
    # Create project directory
    mkdir -p "$PROJECT_DIR"
    
    # Copy skeleton files
    log_info "Copying project template..."
    # Copy all files including hidden ones
    (cd "$SKELETON_DIR" && cp -r . "$PROJECT_DIR/")
    
    # Generate container prefix (sanitized project name)
    local container_prefix
    container_prefix=$(python3 -c "
import re
name = '$project_name'
sanitized = re.sub(r'[^a-zA-Z0-9_-]', '', name.replace(' ', '_'))
sanitized = re.sub(r'[-_]+', '_', sanitized)
if sanitized and sanitized[0].isdigit():
    sanitized = f'project_{sanitized}'
print(sanitized.lower())
")
    
    # Customize project
    log_info "Customizing project configuration..."
    python3 "$SCRIPTS_DIR/customize.py" \
        "$PROJECT_DIR" \
        "$project_name" \
        "$backend_port" \
        "$frontend_port" \
        "$db_port" \
        "$test_db_port" \
        "$container_prefix"
    
    # Create lock file to prevent re-initialization
    echo "# This file prevents re-initialization of the FastAPI project" > "$PROJECT_DIR/fastapi-init.lock"
    echo "# Generated on: $(date)" >> "$PROJECT_DIR/fastapi-init.lock"
    echo "# Project: $project_name" >> "$PROJECT_DIR/fastapi-init.lock"
    
    # Copy environment file
    if [[ -f "$PROJECT_DIR/.env.example" ]]; then
        cp "$PROJECT_DIR/.env.example" "$PROJECT_DIR/.env"
        log_success "Created .env file from template"
    else
        log_error "Missing .env.example file in generated project"
        exit 1
    fi
    
    # Initialize git repository
    if [[ "$skip_git" == false ]]; then
        log_info "Initializing git repository..."
        cd "$PROJECT_DIR"
        
        if git init >/dev/null 2>&1; then
            git add . >/dev/null 2>&1
            git commit -m "Initial commit: FastAPI project setup

Generated with fastapi-init
Project: $project_name
Backend port: $backend_port
Frontend port: $frontend_port
Database port: $db_port" >/dev/null 2>&1
            log_success "Git repository initialized with initial commit"
        else
            log_warning "Failed to initialize git repository"
        fi
        
        cd - >/dev/null
    fi
    
    # Print success message
    echo
    log_success "Project '$project_name' created successfully!"
    echo
    echo "üìÅ Project location: $PROJECT_DIR"
    echo "üåê Backend API: http://localhost:$backend_port"
    echo "üñ•Ô∏è  Frontend: http://localhost:$frontend_port"
    echo "üóÑÔ∏è  Database: localhost:$db_port"
    echo "üìö API Docs: http://localhost:$backend_port/docs"
    echo
    
    # Start development environment
    if [[ "$skip_start" == false ]]; then
        echo "üöÄ Starting development environment..."
        echo
        cd "$PROJECT_DIR"
        
        if make dev; then
            echo
            log_success "Development environment started successfully!"
            echo
            echo "üéâ Your FastAPI application is now running!"
            echo
            echo "Next steps:"
            echo "  ‚Ä¢ Visit http://localhost:$frontend_port to see your frontend"
            echo "  ‚Ä¢ Visit http://localhost:$backend_port/docs for API documentation"
            echo "  ‚Ä¢ Run 'make test' to run the test suite"
            echo "  ‚Ä¢ Run 'make logs' to see service logs"
            echo "  ‚Ä¢ Edit files and see changes automatically reload"
        else
            log_warning "Failed to start development environment automatically"
            echo "You can start it manually by running:"
            echo "  cd $PROJECT_DIR"
            echo "  make dev"
        fi
    else
        echo "To start development:"
        echo "  cd $PROJECT_DIR"
        echo "  make dev"
    fi
    
    echo
    log_success "Happy coding! üéâ"
}

# Main execution
main() {
    echo "üöÄ FastAPI Project Generator"
    echo "=============================="
    echo
    
    parse_args "$@"
    
    create_project \
        "$PROJECT_NAME" \
        "$BACKEND_PORT" \
        "$FRONTEND_PORT" \
        "$DB_PORT" \
        "$SKIP_GIT" \
        "$SKIP_START"
}

# Run main function
main "$@"
