.PHONY: help build up down logs shell-backend shell-frontend shell-db migrate seed clean test lint format

help: ## Show this help message
	@echo 'Usage: make [target]'
	@echo ''
	@echo 'Targets:'
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  %-15s %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# Development Environment
build: ## Build all containers
	docker-compose build

up: ## Start all services
	docker-compose up -d

down: ## Stop all services
	docker-compose down

logs: ## Show logs for all services
	docker-compose logs -f

logs-backend: ## Show backend logs
	docker-compose logs -f backend

logs-frontend: ## Show frontend logs
	docker-compose logs -f frontend

logs-db: ## Show database logs
	docker-compose logs -f postgres

# Container Access
shell-backend: ## Access backend container shell
	docker-compose exec backend bash

shell-frontend: ## Access frontend container shell
	docker-compose exec frontend sh

shell-db: ## Access database shell
	docker-compose exec postgres psql -U postgres -d {{DATABASE_NAME}}

# Database Operations
migrate: ## Run database migrations
	docker-compose exec backend alembic upgrade head

migrate-create: ## Create new migration (usage: make migrate-create MSG="description")
	docker-compose exec backend alembic revision --autogenerate -m "$(MSG)"

migrate-downgrade: ## Downgrade database by one migration
	docker-compose exec backend alembic downgrade -1

migrate-history: ## Show migration history
	docker-compose exec backend alembic history

migrate-current: ## Show current migration
	docker-compose exec backend alembic current

# Testing
test-setup: ## Setup test database
	docker-compose -f docker-compose.test.yml up -d
	@echo "Waiting for test database to be ready..."
	@sleep 5

test-teardown: ## Teardown test database
	docker-compose -f docker-compose.test.yml down -v

test: test-setup ## Run all backend tests
	docker-compose exec backend pytest
	$(MAKE) test-teardown

test-cov: test-setup ## Run tests with coverage report
	docker-compose exec backend pytest --cov=app --cov-report=html --cov-report=term
	$(MAKE) test-teardown

test-watch: test-setup ## Run tests in watch mode
	docker-compose exec backend pytest -f
	$(MAKE) test-teardown

test-unit: test-setup ## Run only unit tests
	docker-compose exec backend pytest -m "unit"
	$(MAKE) test-teardown

test-integration: test-setup ## Run only integration tests
	docker-compose exec backend pytest -m "integration"
	$(MAKE) test-teardown

# Code Quality
lint: ## Run all linters
	$(MAKE) lint-py
	$(MAKE) lint-js

lint-py: ## Lint Python code
	docker-compose exec backend black --check .
	docker-compose exec backend isort --check-only .
	docker-compose exec backend flake8 .

lint-js: ## Lint JavaScript/Vue code
	docker-compose exec frontend npm run lint

format: ## Auto-format all code
	docker-compose exec backend black .
	docker-compose exec backend isort .
	docker-compose exec frontend npm run lint:fix
	docker-compose exec frontend npm run format

type-check: ## Run type checking
	docker-compose exec backend mypy app/

# Cleanup
clean: ## Clean up containers and volumes
	docker-compose down -v
	docker-compose -f docker-compose.test.yml down -v
	docker system prune -f

clean-all: ## Clean everything including images
	$(MAKE) clean
	docker-compose -f docker-compose.yml down --rmi all
	docker-compose -f docker-compose.test.yml down --rmi all

# Development Workflow
dev: ## Start complete development environment
	$(MAKE) build
	$(MAKE) up
	@echo "Waiting for services to be ready..."
	@sleep 10
	$(MAKE) migrate
	@echo ""
	@echo "ðŸš€ {{PROJECT_TITLE}} development environment started!"
	@echo "Frontend: http://localhost:{{FRONTEND_PORT}}"
	@echo "Backend: http://localhost:{{BACKEND_PORT}}"
	@echo "API Docs: http://localhost:{{BACKEND_PORT}}/docs"
	@echo "Database: localhost:{{DB_PORT}}"
	@echo ""
	@echo "Run 'make logs' to see service logs"
	@echo "Run 'make test' to run the test suite"

restart: ## Restart all services
	$(MAKE) down
	$(MAKE) up

rebuild: ## Rebuild and restart all services
	$(MAKE) down
	$(MAKE) build
	$(MAKE) up

# Database Utilities
seed: ## Seed the database with sample data
	docker-compose exec backend python -c "from app.seed import seed_database; seed_database()"

db-reset: ## Reset database (WARNING: destroys all data)
	$(MAKE) down
	docker volume rm {{PROJECT_NAME}}_postgres_data || true
	$(MAKE) up
	@sleep 10
	$(MAKE) migrate

# Development Helpers
install-frontend: ## Install frontend dependencies
	docker-compose exec frontend npm install

install-backend: ## Install backend dependencies
	docker-compose exec backend pip install -r requirements.txt -r requirements-dev.txt

update-deps: ## Update all dependencies
	$(MAKE) install-backend
	$(MAKE) install-frontend

# Monitoring
status: ## Show status of all services
	docker-compose ps

health: ## Check health of all services
	@echo "Backend Health:"
	@curl -s http://localhost:{{BACKEND_PORT}}/health || echo "Backend not responding"
	@echo ""
	@echo "Frontend Health:"
	@curl -s http://localhost:{{FRONTEND_PORT}} > /dev/null && echo "Frontend OK" || echo "Frontend not responding"
	@echo ""
	@echo "Database Health:"
	@docker-compose exec postgres pg_isready -U postgres > /dev/null && echo "Database OK" || echo "Database not responding"
